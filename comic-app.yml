openapi: 3.0.0
info:
  version: '1.0.0'
  title: Comic App Project
  description: This is all APIs for comic app
  contact:
    email: phat.tran.fit@gmail.com
servers:
  - url: http://localhost:3000
    description: Sandbox
  - url: https://pm.comicapp.com/api/v1
    description: Expected

tags:
  - name: comic
  - name: chapters
  - name: users
  - name: comment
  - name: category
  - name: report

paths:
  /comic/count:
    get:
      tags:
        - comic
      summary: Show comics count in database (all or single category)
      parameters:
      - in: query
        name: categoryId
        description: category id
        example: action
        required: false
        schema:
          type: string
      - in: query
        name: chaptersLength
        description: Limit chapter length (greater than)
        example: 50
        required: false
        schema:
          type: number
      - in: query
        name: categoryIn
        description: The results must be assigned to these categories (comma separated)
        required: false
        schema:
          type: string
          example: 'comedy,romance'
      - in: query
        name: categoryEx
        description: The results must be not assigned to any category in these categories (comma separated)
        required: false
        schema:
          type: string
          example: 'award-winning,action'
      - in: query
        name: isDone
        description: The comics is done or not
        example: false
        required: false
        schema:
          type: boolean
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    type: number
  /comic/search:
    get:
      tags:
        - comic
      summary: Search and sort comics 
      parameters:
        - in: query
          name: limit
          required:  true
          description: Limit comics count in result
          example: 10
          schema:
            type: number
        - in: query
          name: skip
          description: Number of items will be skipped before get results
          required: false
          example: 10
          schema:
            type: number
        - in: query
          name: sort
          description: The results will be sorted by (lastUpload, views, followers, chaptersLength, name)
          required: false
          example: name
          schema:
            type: string
        - in: query
          name: sortType
          description: The results are sorted ascending (asc) or descending (desc)
          required: false
          example: asc
          schema:
            type: string
        - in: query
          name: chaptersLength
          description: Limit chapter length (greater than)
          required: false
          example: 50
          schema:
            type: number
        - in: query
          name: categoryIn
          description: The results must be assigned to these categories (comma separated)
          required: false
          example: 'comedy,romance'
          schema:
            type: string
        - in: query
          name: categoryEx
          description: The results must be not assigned to any category in these categories (comma separated)
          required: false
          example: 'award-winning,action'
          schema:
            type: string
        - in: query
          name: isDone
          description: The comics is done or not
          required: false
          example: false
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/comic'
  /comic/searchByName:
    get:
      tags:
        - comic
      summary: Search comics by name
      parameters:
        - in: query
          name: limit
          required:  true
          description: Limit comics count in result
          example: 10
          schema:
            type: number
        - in: query
          name: name
          description: Name or another name of comics
          required: true
          example: gun
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/comic'
  /comic/get/{id}:
    get:
      tags:
        - comic
      summary: Get single comic by id
      parameters:
        - in: path
          name: id
          description: comic id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/comic'
  /comic/like:
    post:
      security:
        - normalUser: []
      tags:
        - comic
      summary: User click like the comic
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                hashName:
                  description: Comic hash name
                  type: string
                  example: lookism
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    type: number
                    description: Current likes
    delete:
      security:
        - normalUser: []
      tags:
        - comic
      summary: User click dislike the comic
      parameters:
        - in: query
          name: hashName
          description: Comic hash name
          required: true
          example: a-falling-cohabitation
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    type: number
                    description: Current likes
  /comic/vote:
    post:
      security:
        - normalUser: []
      tags:
        - comic
      summary: User vote comic
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                comic:
                  description: Comic id
                  type: string
                user:
                  description: User id
                  type: string
                vote:
                  type: number
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    type: object
                    description: Current vote data
                    properties:
                      voteCount:
                        type: number
                      voteSum:
                        type: number
  /comic/add:
    post:
      security:
        - admin: []
      tags:
        - comic
      summary: Add new comic
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                anotherName:
                  type: array
                  items:
                    type: string
                artists:
                  type: array
                  items:
                    type: string
                authors:
                  type: array
                  items:
                    type: string
                avatar:
                  type: string
                description:
                  type: string
                category:
                  type: array
                  items:
                    type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/comic'
  /comic/edit/{id}:
    post:
      security:
        - admin: []
      tags:
        - comic
      summary: edit a comic
      parameters:
        - in: path
          name: id
          description: comic id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                anotherName:
                  type: array
                  items:
                    type: string
                artists:
                  type: array
                  items:
                    type: string
                authors:
                  type: array
                  items:
                    type: string
                avatar:
                  type: string
                description:
                  type: string
                isDone:
                  type: boolean
                category:
                  type: array
                  items:
                    type: string
                chapters:
                  type: array
                  items:
                    $ref: '#/components/schemas/chapter'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/comic'
  /comic/delete/{id}:
    delete:
      security:
        - admin: []
      tags:
        - comic
      summary: remove a comic
      parameters:
        - in: path
          name: id
          description: comic id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean

  /chapters/get/{id}/{chap_id}:
    get:
      tags:
        - chapters
      description: Logged in user will be received exp when get a chapter (refresh after a prior of time) and this chapter will be received a view
      summary: Get single chapter by id
      parameters:
        - in: path
          name: id
          description: comic id
          required: true
          schema:
            type: string
        - in: path
          name: chap_id
          description: chapter id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    allOf:
                      - $ref: '#/components/schemas/chapter'
                      - $ref: '#/components/schemas/chapter_detail'
  /chapters/add:
    post:
      security:
        - admin: []
      tags:
        - chapters
      summary: Add new chapter
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                _id:
                  type: string
                  description: comic id
                name:
                  type: string
                images:
                  type: array
                  items:
                    type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    allOf:
                      - $ref: '#/components/schemas/chapter'
                      - $ref: '#/components/schemas/chapter_detail'
  /chapters/edit/{id}:
    post:
      security:
        - admin: []
      tags:
        - chapters
      summary: edit a chapters
      parameters:
        - in: path
          name: id
          description: chapters id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                images:
                  type: array
                  items:
                    type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    allOf:
                      - $ref: '#/components/schemas/chapter'
                      - $ref: '#/components/schemas/chapter_detail'
  /chapters/delete/{id}:
    delete:
      security:
        - admin: []
      tags:
        - chapters
      summary: remove a chapters
      parameters:
        - in: path
          name: id
          description: chapters id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean

  /users/signup:
    post:
      tags:
        - users
      summary: Register new user
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                userName:
                  type: string
                password:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                dob:
                  type: number
                gender:
                  type: boolean
                  description: true if user is a man
                avatar:
                  type: string
      responses:
        200:
          description: Successfully authenticated. <br/>
            The session ID is returned in a cookie named `access-token`. <br/>You need to include this cookie in subsequent requests.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: access-token=XXX.XX.XXX; Max-Age=600; Path=/; Expires=Fri, 23 Dec 2022 08:26:42 GMT; HttpOnly

          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/user_response'
  /users/login:
    post:
      tags:
        - users
      summary: Login
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                userName:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Successfully authenticated. <br/>
            The session ID is returned in a cookie named `access-token`. <br/>You need to include this cookie in subsequent requests.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: access-token=XXX.XX.XXX; Max-Age=600; Path=/; Expires=Fri, 23 Dec 2022 08:26:42 GMT; HttpOnly
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/user_response'
  /users/logout:
    delete:
      tags:
        - users
      summary: Logout current user and reset token
      responses:
        200:
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
  /users/token:
    post:
      tags:
        - users
      summary: Get new token with refresh token
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        200:
          description: Successfully authenticated. <br/>
            The session ID is returned in a cookie named `access-token`. <br/>You need to include this cookie in subsequent requests.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: access-token=XXX.XX.XXX; Max-Age=600; Path=/; Expires=Fri, 23 Dec 2022 08:26:42 GMT; HttpOnly
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
  /users/follow:
    get:
      security:
        - normalUser: []
      tags:
        - users
      summary: Show all comics which current user followed
      parameters:
        - in: query
          name: id
          description: current user id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/comic'
    post:
      security:
        - normalUser: []
      tags:
        - users
      summary: User click follow a comic
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                comic:
                  description: Comic id
                  type: string
                user:
                  description: User id
                  type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/comic'
    delete:
      security:
        - normalUser: []
      tags:
        - users
      summary: User click un-follow the comic
      parameters:
        - in: query
          name: comicId
          description: Comic id
          required: true
          schema:
            type: string
        - in: query
          name: userId
          description: User id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
  /users/history:
    get:
      security:
        - normalUser: []
      tags:
        - users
      summary: Show current user history
      parameters:
        - in: query
          name: id
          description: current user id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/comic'
  /users/profile:
    get:
      security:
        - normalUser: []
      tags:
        - users
      summary: Show current user profile
      parameters:
        - in: query
          name: id
          description: current user id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/user_profile'
    post:
      security:
        - normalUser: []
      tags:
        - users
      summary: Edit current user profile
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                password:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                dob:
                  type: number
                gender:
                  type: boolean
                  description: true if user is a man
                avatar:
                  type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/user_profile'
  /users/delete:
    delete:
      security:
        - normalUser: []
        - admin: []
      tags:
        - users
      summary: Remove user by id
      parameters:
        - in: query
          name: id
          description: current user id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean

  /comment:
    get:
      tags:
        - comment
      summary: Get comment by id
      parameters:
        - in: query
          name: id
          description: comment id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/comment'
    post:
      security:
        - normalUser: []
      tags:
        - comment
      summary: Add comment
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                comicId:
                  description: comic id
                  type: string
                chapterId:
                  description: chapter id
                  type: string
                replyId:
                  description: Empty if it not is a reply
                  type: string
                message:
                  type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/comment'
    delete:
      security:
        - normalUser: []
        - admin: []
      tags:
        - comment
      summary: Remove comment by id
      parameters:
        - in: query
          name: id
          description: comment by id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
  /comment/newest:
    get:
      tags:
        - comment
      summary: Get newest comments
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/comment'
  /comment/like:
    post:
      tags:
        - comment
      summary: Like a comment
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                commentId:
                  type: string
                userId:
                  type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/comment'
    delete:
      tags:
        - comment
      summary: Remove like a comment
      parameters:
      - in: query
        name: name
        description: description
        required: false
        schema:
          type: object
          properties:
            commentId:
              type: string
            userId:
              type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/comment'
  /comment/dislike:
    post:
      tags:
        - comment
      summary: Dislike a comment
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                commentId:
                  type: string
                userId:
                  type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/comment'
    delete:
      tags:
        - comment
      summary: Remove dislike a comment
      parameters:
      - in: query
        name: name
        description: description
        required: false
        schema:
          type: object
          properties:
            commentId:
              type: string
            userId:
              type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/comment'

  /category/add:
    post:
      security:
        - admin: []
      tags:
        - category
      summary: Add new category
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/category'
  /category/assign:
    post:
      security:
        - admin: []
      tags:
        - category
      summary: Assign comic to a category
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                comicId:
                  type: string
                categoryId:
                  type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/category'
    delete:
      security:
        - admin: []
      tags:
        - category
      summary: Unassign comic to a category
      parameters:
      - in: query
        name: name
        description: description
        required: false
        schema:
          type: object
          properties:
            comicId:
              type: string
            categoryId:
              type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/category'

  /report:
    post:
      security:
        - normalUser: []
      tags:
        - report
      summary: User add report to admin
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                type:
                  type: string
                message:
                  type: string
                userId:
                  type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/report'
    delete:
      security:
        - admin: []
      tags:
        - report
      summary: Admin remove report
      parameters:
        - in: query
          name: id
          description: report id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
  /report/resolve:
    post:
      security:
        - admin: []
      tags:
        - report
      summary: Admin confirm this problem are resolved
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                reportId:
                  type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/report'

components:
  schemas:
    comic:
      type: object
      properties:
        _id:
          type: string
        hashName:
          type: string
        name:
          type: string
        anotherName:
          type: array
          items:
            type: string
        artists:
          type: array
          items:
            type: string
        authors:
          type: array
          items:
            type: string
        avatar:
          type: string
        description:
          type: string
        isDone:
          type: boolean
        category:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
              name:
                type: string
        views:
          type: number
        likes:
          type: number
        followers:
          type: number
        voteCount:
          type: number
        voteSum:
          type: number
        chapters:
          type: array
          items:
            $ref: '#/components/schemas/chapter'
        chaptersLength:
          type: number
        lastUpload:
          oneOf:
            - type: string
            - type: number
      xml:
        name: comic
    chapter:
      type: object
      properties:
        _id:
          type: string
        hashName:
          type: string
        name:
          type: string
        updateDate:
          oneOf:
            - type: string
            - type: number
        views:
          type: number
    chapter_detail:
      type: object
      properties:
        images:
          type: array
          items:
            type: string
        comments:
          type: array
          items:
            type: string
    user_response:
      type: object
      properties:
        _id:
          type: string
        email:
          type: string
        userName:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        refreshToken:
          type: string
    user_profile:
      type: object
      properties:
        _id:
          type: string
        email:
          type: string
        userName:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        dob:
          type: number
        gender:
          type: boolean
        level:
          type: number
        follows:
          type: array
          items:
            type: string
        likes:
          type: array
          items:
            type: string
    comment:
      type: object
      properties:
        _id:
          type: string
        comicId:
          type: string
        message:
          type: string
        replies:
          type: array
          description: List replied id
          items:
            type: string
        vote:
          type: object
          properties:
            like:
              type: array
              items:
                type: string
            dislike:
              type: array
              items:
                type: string
    category:
      type: object
      properties:
        _id:
          type: string
        key:
          type: string
        name:
          type: string
        assign:
          type: array
          items:
            type: string
    report:
      type: object
      properties:
        _id:
          type: string
        type:
          type: string
        userId:
          type: string
        message:
          type: string
        createData:
          type: number
        resolved:
          type: boolean

  securitySchemes:
    normalUser:
      type: apiKey
      in: cookie
      name: access-token
      description: For accessing the protected API resources, you must have received a valid JWT token after registering or logging in. This JWT token must then be used for all protected resources by passing it in via the 'Authorization' header.<br/><br/> A JWT token is generated by the API by either registering via /users/signup or logging in via /users/login.<br/>

    admin:
      type: apiKey
      in: cookie
      name: access-token
      description: For accessing the protected API resources, you must have received a valid JWT token after logging in to admin dashboard<br/>
